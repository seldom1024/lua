---
--- 程序运行中错误处理是必要的，在我们进行文件操作，数据转移及web service 调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。
--- 任何程序语言中，都需要错误处理。错误类型有：
--- 语法错误
--- 运行错误
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seldom.
--- DateTime: 2020/5/1 18:34
---


--- 运行错误
--- 运行错误是程序可以正常执行，但是会输出报错信息。如下实例由于参数输入错误，程序执行时报错：
--[[
function add(a,b)
    return a+b
end

add(10)
--]]



--- 错误处理
--- 我们可以使用两个函数：assert 和 error 来处理错误。实例如下：
local function add(a, b)
    assert(type(a) == "number", "a no a number")
    assert(type(b) == "number", "b no a number")
    return a + b;
end

add(10, 30)


---
--- error函数
--- 语法格式：
--- error (message [, level])
--- 功能：终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)
--- 通常情况下，error会附加一些错误位置的信息到message头部。
--- Level参数指示获得错误的位置:
--- Level=1[默认]：为调用error位置(文件+行号)
--- Level=2：指出哪个调用error的函数的函数
--- Level=0:不添加错误位置信息
---



---
--- pcall 和 xpcall、debug
--- Lua中处理错误，可以使用函数pcall（protected call）来包装需要执行的代码。
--- pcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo。
--- 语法格式如下
--[[
if pcall(function_name, ….) then
-- 没有错误
else
-- 一些错误
end
--]]
---

--- 示例
print(pcall(function (i)
    print(i)
end
, 33))

print(pcall(function(i)
    print(i)
    error('error..')
end, 33))

---
--- pcall以一种"保护模式"来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。
--- 通常在错误发生时，希望落得更多的调试信息，而不只是发生错误的位置。但pcall返回时，它已经销毁了调用桟的部分内容。
--- Lua提供了xpcall函数，xpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用debug库来获取关于错误的额外信息了。
--- debug库提供了两个通用的错误处理函数:
--- debug.debug：提供一个Lua提示符，让用户来检查错误的原因
--- debug.traceback：根据调用桟来构建一个扩展的错误消息
---

--- 示例
print(xpcall(function(i)
    print(i)
    error('error..')
end, function()
    print(debug.traceback())
end, 33))

--- 示例
function myFunction ()
    n = n/nil
end

function myErrorHandler( err )
    print( "ERROR:", err )
end

status = xpcall( myFunction, myErrorHandler )
print( status)